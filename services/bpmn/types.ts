/**
 * TypeScript type definitions for BPMN elements and structures.
 * Based on legacy Python schemas from bpmn_assistant/core/schemas.py
 */

// ============================================================================
// Base Types
// ============================================================================

export type TaskType = "task" | "userTask" | "serviceTask"
export type EventType = "startEvent" | "endEvent"
export type GatewayType = "exclusiveGateway" | "parallelGateway"
export type BPMNElementTypeValue = TaskType | EventType | GatewayType

// ============================================================================
// BPMN Elements (Hierarchical Structure)
// ============================================================================

/**
 * Represents a BPMN task.
 * Tasks must have a type, unique ID, and descriptive label.
 */
export interface BPMNTask {
  type: TaskType
  id: string
  label: string
}

/**
 * Represents a BPMN event (start or end).
 * Events must have a type and unique ID.
 * Labels are optional for events.
 */
export interface BPMNEvent {
  type: EventType
  id: string
  label?: string
}

/**
 * Represents a branch in an exclusive gateway.
 * Each branch has a condition, a path of elements, and optionally a "next" reference.
 */
export interface ExclusiveGatewayBranch {
  /** Textual condition for this branch (e.g., "If approved") */
  condition: string
  /** Array of elements to execute if condition is met */
  path: BPMNElement[]
  /** Optional ID of next element if not following default sequence */
  next?: string
}

/**
 * Represents an exclusive gateway (XOR - one path taken).
 * Branches may optionally reconverge at a join gateway.
 */
export interface ExclusiveGateway {
  type: "exclusiveGateway"
  id: string
  /** Label describing the decision point (e.g., "Order valid?") */
  label: string
  /** Whether branches reconverge at a join gateway */
  has_join: boolean
  /** Array of possible branches */
  branches: ExclusiveGatewayBranch[]
}

/**
 * Represents a parallel gateway (AND - all paths taken).
 * All branches execute in parallel and must complete before continuing.
 * A join gateway is automatically created.
 */
export interface ParallelGateway {
  type: "parallelGateway"
  id: string
  /** Array of parallel branches, each containing elements to execute */
  branches: BPMNElement[][]
}

/**
 * Union type representing any BPMN element in hierarchical structure.
 */
export type BPMNElement = BPMNTask | BPMNEvent | ExclusiveGateway | ParallelGateway

/**
 * Represents a complete BPMN process in hierarchical structure.
 * This is the format generated by the LLM.
 */
export interface BPMNProcess {
  process: BPMNElement[]
}

// ============================================================================
// Flat Structure (Post-Transform, Pre-XML)
// ============================================================================

/**
 * Represents a BPMN element in flat structure with flow references.
 * This format is used for XML generation.
 */
export interface FlatBPMNElement {
  id: string
  type: BPMNElementTypeValue
  label: string | null
  incoming: string[]
  outgoing: string[]
}

/**
 * Represents a sequence flow between elements.
 */
export interface SequenceFlow {
  id: string
  sourceRef: string
  targetRef: string
  condition: string | null
}

/**
 * Represents the flat structure ready for XML generation.
 */
export interface FlatBPMNStructure {
  elements: FlatBPMNElement[]
  flows: SequenceFlow[]
}

// ============================================================================
// Edit Operations
// ============================================================================

/**
 * Arguments for adding an element.
 */
export interface AddElementArgs {
  element: BPMNElement
  before_id?: string
  after_id?: string
}

/**
 * Arguments for deleting an element.
 */
export interface DeleteElementArgs {
  element_id: string
}

/**
 * Arguments for updating an element.
 */
export interface UpdateElementArgs {
  new_element: BPMNElement
}

/**
 * Arguments for moving an element.
 */
export interface MoveElementArgs {
  element_id: string
  before_id?: string
  after_id?: string
}

/**
 * Arguments for redirecting a branch.
 */
export interface RedirectBranchArgs {
  branch_condition: string
  next_id: string
}

/**
 * Union type for all edit operation arguments.
 */
export type EditFunctionArgs =
  | AddElementArgs
  | DeleteElementArgs
  | UpdateElementArgs
  | MoveElementArgs
  | RedirectBranchArgs

/**
 * Represents an edit proposal from the LLM.
 */
export interface EditProposal {
  function: "add_element" | "delete_element" | "update_element" | "move_element" | "redirect_branch"
  arguments: EditFunctionArgs
}

/**
 * Represents a stop signal from the LLM indicating editing is complete.
 */
export interface StopSignal {
  stop: true
}

/**
 * Union type for intermediate edit responses.
 */
export type IntermediateEditProposal = EditProposal | StopSignal

/**
 * Represents a change request for editing.
 */
export interface ChangeRequest {
  description: string
  functions: EditProposal[]
}

// ============================================================================
// Message and Communication Types
// ============================================================================

/**
 * Represents a message in the conversation history.
 */
export interface MessageItem {
  role: "user" | "assistant" | "system"
  content: string
}

// ============================================================================
// Validation Error Types
// ============================================================================

/**
 * Represents a validation error with context.
 */
export interface ValidationError {
  message: string
  elementId?: string
  elementType?: string
  path?: string[]
}

/**
 * Result of validation with potential errors.
 */
export interface ValidationResult {
  valid: boolean
  errors: ValidationError[]
}

// ============================================================================
// Type Guards
// ============================================================================

/**
 * Type guard to check if an element is a task.
 */
export function isTask(element: BPMNElement): element is BPMNTask {
  return ["task", "userTask", "serviceTask"].includes(element.type)
}

/**
 * Type guard to check if an element is an event.
 */
export function isEvent(element: BPMNElement): element is BPMNEvent {
  return ["startEvent", "endEvent"].includes(element.type)
}

/**
 * Type guard to check if an element is an exclusive gateway.
 */
export function isExclusiveGateway(element: BPMNElement): element is ExclusiveGateway {
  return element.type === "exclusiveGateway"
}

/**
 * Type guard to check if an element is a parallel gateway.
 */
export function isParallelGateway(element: BPMNElement): element is ParallelGateway {
  return element.type === "parallelGateway"
}

/**
 * Type guard to check if an element is any gateway.
 */
export function isGateway(element: BPMNElement): element is ExclusiveGateway | ParallelGateway {
  return isExclusiveGateway(element) || isParallelGateway(element)
}

/**
 * Type guard to check if a response is a stop signal.
 */
export function isStopSignal(response: IntermediateEditProposal): response is StopSignal {
  return "stop" in response && response.stop === true
}

/**
 * Type guard to check if a response is an edit proposal.
 */
export function isEditProposal(response: IntermediateEditProposal): response is EditProposal {
  return "function" in response && "arguments" in response
}
